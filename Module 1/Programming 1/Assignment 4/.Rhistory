install.packages("tidyverse")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("eBayAuctions.csv")
setwd("C:/Users/harpe/Downloads")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("eBayAuctions.csv")
sum(is.na(auctionData))
sum(anyNA(auctionData))
?is.na()
setwd("~/Georgetown MSBA/Module 1/Programming 1/Assignment 4")
# Load "Toyota4.csv" and save it as carsData.
# Load any packages that you may use for this assignment
carsData = read.csv("Toyota4.csv")
library(tidyverse)
setwd("~/Georgetown MSBA/Module 1/Final Project")
listingdata = read.csv("Listings.csv")
reviewdata = read.csv("Reviews.csv")
listingdata = read.csv("Listings.csv")
reviewdata = read.csv("Reviews.csv")
View(listingdata)
View(listingdata)
completedata <- left_join(listingdata,reviewdata, by=c("listing_id","id"))
completedata <- left_join(listingdata,reviewdata, by=c("id","listing_id"))
completedata <- left_join(listingdata,reviewdata, by=c("id"="listing_id"))
View(completedata)
missing_vars <- colnames(completedata)[colSums(is.na(completedata)) > 0]
print(paste("Variables with missing values:", paste(completedata, collapse = ", ")))
# Assuming complete_data is your dataframe
# Count total number of missing values in the entire dataset
total_missing <- sum(is.na(complete_data))
complete_data <- left_join(listingdata,reviewdata, by=c("id"="listing_id"))
listingdata = read.csv("Listings.csv")
reviewdata = read.csv("Reviews.csv")
complete_data <- left_join(listingdata,reviewdata, by=c("id"="listing_id"))
# Assuming complete_data is your dataframe
# Count total number of missing values in the entire dataset
total_missing <- sum(is.na(complete_data))
# Count number of missing values in each column
missing_per_column <- sapply(complete_data, function(x) sum(is.na(x)))
# Print the results
cat("Total number of missing values:", total_missing, "\n")
cat("Number of missing values per column:\n")
View(complete_data)
View(complete_data)
# Calculate the mean of the host_acceptance_rate, excluding NA values
mean_acceptance_rate <- mean(complete_data$host_acceptance_rate, na.rm = TRUE)
# Replace NA values in host_acceptance_rate with the calculated mean
complete_data_draft <- complete_data %>%
mutate(host_acceptance_rate = ifelse(is.na(host_acceptance_rate), mean_acceptance_rate, host_acceptance_rate))
# Print the updated dataframe
print(complete_data_draft)
View(complete_data_draft)
View(complete_data)
View(complete_data_draft)
# Replace blank cells in room_type with "Entire home/apt"
complete_data_draft <- complete_data_draft %>%
mutate(room_type = ifelse(room_type == "", "Entire home/apt", room_type))
# Print the updated dataframe
print(complete_data_draft)
View(complete_data_draft)
# Replace blank cells in room_type with "Entire home/apt"
complete_data_draft <- complete_data_draft %>%
mutate(room_type = ifelse(room_type == "NA", "Entire home/apt", room_type))
# Print the updated dataframe
print(complete_data_draft)
View(complete_data_draft)
# Replace blank cells in room_type with "Entire home/apt"
complete_data_draft <- complete_data_draft %>%
mutate(room_type = ifelse(is.na(room_type), "Entire home/apt", room_type))
# Print the updated dataframe
print(complete_data_draft)
View(complete_data_draft)
# Calculate the mean of the bedrooms, excluding NA values
mean_bedrooms <- mean(complete_data_draft$bedrooms, na.rm = TRUE)
# Calculate the mean of the bedrooms, excluding NA values
mean_bedrooms <- ceiling(mean(complete_data_draft$bedrooms, na.rm = TRUE))
# Replace blank cells in room_type with "Entire home/apt"
complete_data_draft <- complete_data_draft %>%
mutate(room_type = case_when(
is.na(room_type) & grepl("private", bathroom, ignore.case = TRUE) ~ "Private room",
is.na(room_type) & grepl("shared", bathroom, ignore.case = TRUE) ~ "Shared room",
is.na(room_type) ~ "Entire home/apt",
TRUE ~ room_type
))
# Replace blank cells in room_type with "Entire home/apt"
complete_data_draft <- complete_data_draft %>%
mutate(room_type = case_when(
is.na(room_type) & grepl("private", bathrooms, ignore.case = TRUE) ~ "Private room",
is.na(room_type) & grepl("shared", bathrooms, ignore.case = TRUE) ~ "Shared room",
is.na(room_type) ~ "Entire home/apt",
TRUE ~ room_type
))
# Calculate the mean of the bedrooms, excluding NA values
mean_bedrooms <- ceiling(mean(complete_data_draft$bedrooms, na.rm = TRUE))
# Print the updated dataframe
print(complete_data_draft)
View(complete_data_draft)
setwd("~/Georgetown MSBA/Module 1/Programming 1/Assignment 4")
# Load "Toyota4.csv" and save it as carsData.
# Load any packages that you may use for this assignment
carsData = read.csv("Toyota4.csv")
library(tidyverse)
library(stargazer)
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
# Identify the variable(s) with missing values
missing_vars <- colnames(carsData)[colSums(is.na(carsData)) > 0]
print(paste("Variables with missing values:", paste(missing_vars, collapse = ", "))) # this code is not working
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
# Identify the variable(s) with missing values
missing_vars <- colnames(carsData)[colSums(is.na(carsData)) > 0]
setwd("~/Georgetown MSBA/Module 1/Programming 1/Assignment 4")
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
# Identify the variable(s) with missing values
missing_vars <- colnames(carsData)[colSums(is.na(carsData)) > 0]
# Load "Toyota4.csv" and save it as carsData.
# Load any packages that you may use for this assignment
carsData = read.csv("Toyota4.csv")
library(tidyverse)
library(stargazer)
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
# Identify the variable(s) with missing values
missing_vars <- colnames(carsData)[colSums(is.na(carsData)) > 0]
# Create scatterplot for Price vs. Age
ggplot(carsData, aes(x = Age, y = Price)) +
geom_point() +
labs(title = "Price vs. Age", x = "Age", y = "Price")
# Create scatterplot for Price vs. Mileage
ggplot(carsData, aes(x = Mileage, y = Price)) +
geom_point() +
labs(title = "Price vs. Mileage", x = "Mileage", y = "Price")
# Calculate the correlation coefficient for Price vs. Age
cor_price_age <- cor(carsData$Price, carsData$Age, use = "complete.obs")
print(paste("Correlation coefficient between Price and Age:", cor_price_age))
# Calculate the correlation coefficient for Price vs. Mileage
cor_price_mileage <- cor(carsData$Price, carsData$Mileage, use = "complete.obs")
print(paste("Correlation coefficient between Price and Mileage:", cor_price_mileage))
# Calculate the z-scores for the Price variable
carsData$z_score <- (carsData$Price - mean(carsData$Price, na.rm = TRUE)) / sd(carsData$Price, na.rm = TRUE)
# Identify outliers
outliers <- carsData %>% filter(abs(z_score) > 3)
# Count the number of outliers
num_outliers <- nrow(outliers)
print(paste("Number of outliers:", num_outliers))
# Remove outliers
carsUpdated <- carsData %>% filter(abs(z_score) <= 3)
# Drop the z_score column as it's no longer needed
carsUpdated <- carsUpdated %>% select(-z_score)
View(carsData)
View(carsData)
# Load the updated dataset
carsUpdated <- read.csv("carsUpdated.csv")
# Save the cleaned data
write.csv(carsUpdated, "carsUpdated.csv", row.names = FALSE)
# Load "Toyota4.csv" and save it as carsData.
# Load any packages that you may use for this assignment
carsData = read.csv("Toyota4.csv")
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
# Identify the variable(s) with missing values
missing_vars <- colnames(carsData)[colSums(is.na(carsData)) > 0]
print(paste("Variables with missing values:", paste(missing_vars, collapse = ", ")))
# Replace missing values with the mean of non-missing values
for (var in missing_vars) {
carsData[[var]][is.na(carsData[[var]])] <- mean(carsData[[var]], na.rm = TRUE)
}
# Verify that there are no more missing values
sum(is.na(carsData))
#Q2:
# Summarize the fuel type variable using a frequency table and a plot.
# Return the name of the most common fuel type category.
# Summarize the fuel type variable using a frequency table
fuel_type_summary <- table(carsData$Fuel_Type)
print(fuel_type_summary)
# Plot the fuel type variable
ggplot(carsData, aes(x = Fuel_Type)) +
geom_bar() +
labs(title = "Frequency of Fuel Types", x = "Fuel Type", y = "Count")
# Identify the most common fuel type category
most_common_fuel_type <- names(fuel_type_summary)[which.max(fuel_type_summary)]
print(paste("The most common fuel type category is:", most_common_fuel_type))
# Create a boxplot comparing the distribution of price across different fuel types
ggplot(carsData, aes(x = Fuel_Type, y = Price)) +
geom_boxplot() +
labs(title = "Price Distribution by Fuel Type", x = "Fuel Type", y = "Price")
# Calculate the average price for each fuel type category
average_price_by_fuel <- carsData %>%
group_by(Fuel_Type) %>%
summarize(Average_Price = mean(Price, na.rm = TRUE))
print(average_price_by_fuel)
# Identify the fuel category with the highest average price
highest_avg_price <- average_price_by_fuel %>%
filter(Average_Price == max(Average_Price))
print(paste("The fuel category with the highest average price is:", highest_avg_price$Fuel_Type, "with an average price of", highest_avg_price$Average_Price))
# Create scatterplot for Price vs. Age
ggplot(carsData, aes(x = Age, y = Price)) +
geom_point() +
labs(title = "Price vs. Age", x = "Age", y = "Price")
# Create scatterplot for Price vs. Mileage
ggplot(carsData, aes(x = Mileage, y = Price)) +
geom_point() +
labs(title = "Price vs. Mileage", x = "Mileage", y = "Price")
# Calculate the correlation coefficient for Price vs. Age
cor_price_age <- cor(carsData$Price, carsData$Age, use = "complete.obs")
print(paste("Correlation coefficient between Price and Age:", cor_price_age))
# Calculate the correlation coefficient for Price vs. Mileage
cor_price_mileage <- cor(carsData$Price, carsData$Mileage, use = "complete.obs")
print(paste("Correlation coefficient between Price and Mileage:", cor_price_mileage))
# Determine which variable is more strongly correlated with Price
if (abs(cor_price_age) > abs(cor_price_mileage)) {
print(paste("Age is more strongly correlated with Price with a correlation coefficient of", cor_price_age))
} else {
print(paste("Mileage is more strongly correlated with Price with a correlation coefficient of", cor_price_mileage))
}
# Calculate the z-scores for the Price variable
carsData$z_score <- (carsData$Price - mean(carsData$Price, na.rm = TRUE)) / sd(carsData$Price, na.rm = TRUE)
# Identify outliers
outliers <- carsData %>% filter(abs(z_score) > 3)
# Count the number of outliers
num_outliers <- nrow(outliers)
print(paste("Number of outliers:", num_outliers))
# Remove outliers
carsUpdated <- carsData %>% filter(abs(z_score) <= 3)
# Drop the z_score column as it's no longer needed
carsUpdated <- carsUpdated %>% select(-z_score)
# Save the cleaned data
write.csv(carsUpdated, "carsUpdated.csv", row.names = FALSE)
# Load the updated dataset
carsUpdated <- read.csv("carsUpdated.csv")
# Run the simple linear regression
regAge <- lm(Price ~ Age, data = carsUpdated)
# Return the summary of the results
summary(regAge)
# Run the multiple linear regression
regBoth <- lm(Price ~ Age + Mileage, data = carsUpdated)
# Return the summary of the results
summary(regBoth)
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "residual.se"))
# Run the simple linear regression
regMileage <- lm(Price ~ Mileage, data = carsUpdated)
# Return the summary of the results
summary(regMileage)
# Run the multiple linear regression
regBoth <- lm(Price ~ Age + Mileage, data = carsUpdated)
# Return the summary of the results
summary(regBoth)
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "residual.se"))
library(stargazer)
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "residual.se"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "ser"))
# Load "Toyota4.csv" and save it as carsData.
# Load any packages that you may use for this assignment
carsData = read.csv("Toyota4.csv")
library(tidyverse)
library(stargazer)
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
# Identify the variable(s) with missing values
missing_vars <- colnames(carsData)[colSums(is.na(carsData)) > 0]
print(paste("Variables with missing values:", paste(missing_vars, collapse = ", ")))
# Replace missing values with the mean of non-missing values
for (var in missing_vars) {
carsData[[var]][is.na(carsData[[var]])] <- mean(carsData[[var]], na.rm = TRUE)
}
# Verify that there are no more missing values
sum(is.na(carsData))
#Q2:
# Summarize the fuel type variable using a frequency table and a plot.
# Return the name of the most common fuel type category.
# Summarize the fuel type variable using a frequency table
fuel_type_summary <- table(carsData$Fuel_Type)
print(fuel_type_summary)
# Plot the fuel type variable
ggplot(carsData, aes(x = Fuel_Type)) +
geom_bar() +
labs(title = "Frequency of Fuel Types", x = "Fuel Type", y = "Count")
# Identify the most common fuel type category
most_common_fuel_type <- names(fuel_type_summary)[which.max(fuel_type_summary)]
print(paste("The most common fuel type category is:", most_common_fuel_type))
# Create a boxplot comparing the distribution of price across different fuel types
ggplot(carsData, aes(x = Fuel_Type, y = Price)) +
geom_boxplot() +
labs(title = "Price Distribution by Fuel Type", x = "Fuel Type", y = "Price")
# Calculate the average price for each fuel type category
average_price_by_fuel <- carsData %>%
group_by(Fuel_Type) %>%
summarize(Average_Price = mean(Price, na.rm = TRUE))
print(average_price_by_fuel)
# Identify the fuel category with the highest average price
highest_avg_price <- average_price_by_fuel %>%
filter(Average_Price == max(Average_Price))
print(paste("The fuel category with the highest average price is:", highest_avg_price$Fuel_Type, "with an average price of", highest_avg_price$Average_Price))
# Create scatterplot for Price vs. Age
ggplot(carsData, aes(x = Age, y = Price)) +
geom_point() +
labs(title = "Price vs. Age", x = "Age", y = "Price")
# Create scatterplot for Price vs. Mileage
ggplot(carsData, aes(x = Mileage, y = Price)) +
geom_point() +
labs(title = "Price vs. Mileage", x = "Mileage", y = "Price")
# Calculate the correlation coefficient for Price vs. Age
cor_price_age <- cor(carsData$Price, carsData$Age, use = "complete.obs")
print(paste("Correlation coefficient between Price and Age:", cor_price_age))
# Calculate the correlation coefficient for Price vs. Mileage
cor_price_mileage <- cor(carsData$Price, carsData$Mileage, use = "complete.obs")
print(paste("Correlation coefficient between Price and Mileage:", cor_price_mileage))
# Determine which variable is more strongly correlated with Price
if (abs(cor_price_age) > abs(cor_price_mileage)) {
print(paste("Age is more strongly correlated with Price with a correlation coefficient of", cor_price_age))
} else {
print(paste("Mileage is more strongly correlated with Price with a correlation coefficient of", cor_price_mileage))
}
# Calculate the z-scores for the Price variable
carsData$z_score <- (carsData$Price - mean(carsData$Price, na.rm = TRUE)) / sd(carsData$Price, na.rm = TRUE)
# Identify outliers
outliers <- carsData %>% filter(abs(z_score) > 3)
# Count the number of outliers
num_outliers <- nrow(outliers)
print(paste("Number of outliers:", num_outliers))
# Remove outliers
carsUpdated <- carsData %>% filter(abs(z_score) <= 3)
# Drop the z_score column as it's no longer needed
carsUpdated <- carsUpdated %>% select(-z_score)
# Run the simple linear regression
regAge <- lm(Price ~ Age, data = carsUpdated)
# Return the summary of the results
summary(regAge)
# Load the updated dataset
carsUpdated <- read.csv("carsUpdated.csv")
# Run the simple linear regression
regMileage <- lm(Price ~ Mileage, data = carsUpdated)
# Return the summary of the results
summary(regMileage)
# Run the multiple linear regression
regBoth <- lm(Price ~ Age + Mileage, data = carsUpdated)
# Return the summary of the results
summary(regBoth)
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "ser"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = c("SLR Age","SLR Mileage", "MLR"),
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "ser"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "ser"),
model.names = c("Age Model", "Mileage Model", "Combined Model"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = c("SLR Age","SLR Mileage", "MLR"),
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "ser"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
out = "regression_comparison.txt",
keep.stat = c("n", "rsq", "adj.rsq", "ser"),
column.labels = c("Age Model", "Mileage Model", "Combined Model"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
keep.stat = c("n", "rsq", "adj.rsq", "ser"),
column.labels = c("Age Model", "Mileage Model", "Combined Model"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
keep.stat = c("n", "rsq", "adj.rsq", "ser"),
column.labels = c("SLR Age", "SLR Mileage", "Multiple Linear Regression"))
# Generate the comparison table
stargazer(regAge, regMileage, regBoth,
type = "text",
title = "Comparison of Regression Models",
dep.var.labels = "Price",
covariate.labels = c("Age", "Mileage", "Intercept"),
keep.stat = c("n", "rsq", "adj.rsq", "ser"),
column.labels = c("Simple Linear Regresssion Age", "Simple Linear Regression Mileage", "Multiple Linear Regression"))
print(paste("Correlation coefficient between Price and Age:", cor_price_age))
print(paste("Correlation coefficient between Price and Mileage:", cor_price_mileage))
