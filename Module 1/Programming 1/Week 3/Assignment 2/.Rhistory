setwd("~/Georgetown MSBA/Module 1/Programming 1/Week 3/Assignment 2")
# Preparation: Load the required packages.
library(tidyverse)
#Q1:
# Load the World values survey data "WorldValues3.csv" and save it as WorldData.
# Load the country code data "CountryCodes3.csv" and save it as CountryData.
WorldData = read.csv("WorldValues3.csv")
CountryData = read.csv("CountryCodes3.csv")
#Q2:
# Join the country name from the CountryCode data into WorldData.
# Note that country code is called *ID* in CountryData and *CountryCode* in WorldData.
# Return the first 10 unique countries.
# Perform a join to add country names to WorldData
MergedData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Return the first 10 unique countries
unique_countries <- unique(MergedData$CountryName)
first_10_countries <- head(unique_countries, 10)
#Q2:
# Join the country name from the CountryCode data into WorldData.
# Note that country code is called *ID* in CountryData and *CountryCode* in WorldData.
# Return the first 10 unique countries.
# Perform a join to add countrycode to WorldData
MergedData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
#Q2:
# Join the country name from the CountryCode data into WorldData.
# Note that country code is called *ID* in CountryData and *CountryCode* in WorldData.
# Return the first 10 unique countries.
# Perform a join to add countrycode to WorldData
MergedData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Print the first 10 unique countries
print(first_10_countries)
# Return the first 10 unique countries
unique_countries <- unique(MergedData$CountryName)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
# Perform a join to add countrycode to WorldData
MergedData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
View(CountryData)
View(CountryData)
View(WorldData)
View(WorldData)
View(MergedData)
# Return the first 10 unique countries
unique_countries <- unique(MergedData$Country)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
# Drop the specified columns
WorldData <- WorldData %>%
select(-income, -education, -lifeexpect)
# Drop the specified columns
WorldData <- WorldData %>%
select(-Income, -Education, -lifeexpect)
# Drop the specified columns
WorldData <- WorldData %>% select(c(-Income, -Education, -lifeexpect))
# Drop the specified columns
WorldData <- WorldData %>% select(-Income)
# Perform a join to add countrycode to WorldData
WorldData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Return the first 10 unique countries
unique_countries <- unique(WorldData$Country)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
# Drop the specified columns
WorldData <- WorldData %>% select(-Education)
# Drop the specified columns
WorldData <- WorldData %>% select(-Education)
#Q3:
# Update WorldData by dropping income, education, and lifeexpect variables.
# What is the dimension of the updated WorldData?
colnames(WorldData)
# Perform a join to add countrycode to WorldData
WorldData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Return the first 10 unique countries
unique_countries <- unique(WorldData$Country)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
#Q3:
# Update WorldData by dropping income, education, and lifeexpect variables.
# What is the dimension of the updated WorldData?
colnames(WorldData)
View(MergedData)
# Preparation: Load the required packages.
library(tidyverse)
#Q1:
# Load the World values survey data "WorldValues3.csv" and save it as WorldData.
# Load the country code data "CountryCodes3.csv" and save it as CountryData.
WorldData = read.csv("WorldValues3.csv")
CountryData = read.csv("CountryCodes3.csv")
# Perform a join to add countrycode to WorldData
WorldData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Return the first 10 unique countries
unique_countries <- unique(WorldData$Country)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
#Q3:
# Update WorldData by dropping income, education, and lifeexpect variables.
# What is the dimension of the updated WorldData?
colnames(WorldData)
# Drop the specified columns
WorldData <- WorldData %>% select(-Education)
# Drop the specified columns
WorldData <- WorldData %>% select(-Income, -Education, - lifeexpect)
# Preparation: Load the required packages.
library(tidyverse)
#Q1:
# Load the World values survey data "WorldValues3.csv" and save it as WorldData.
# Load the country code data "CountryCodes3.csv" and save it as CountryData.
WorldData = read.csv("WorldValues3.csv")
CountryData = read.csv("CountryCodes3.csv")
# Perform a join to add countrycode to WorldData
WorldData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Return the first 10 unique countries
unique_countries <- unique(WorldData$Country)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
#Q3:
# Update WorldData by dropping income, education, and lifeexpect variables.
# What is the dimension of the updated WorldData?
colnames(WorldData)
# Drop the specified columns
WorldData <- WorldData %>% select(-Income, -Education, - lifeexpect)
# Get the dimension of the updated WorldData
dim(WorldData)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(CountryName) %>%
summarise(
avg_age = mean(age, na.rm = TRUE),
percent_immigrant = mean(immigrant, na.rm = TRUE) * 100
)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>%
summarise(
avg_age = mean(age, na.rm = TRUE),
percent_immigrant = mean(immigrant, na.rm = TRUE) * 100
)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>%
summarise(
avg_age = mean(Age, na.rm = TRUE),
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>%
summarise(
avg_age = mean(Age, na.rm = TRUE),
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>% summarise(
avg_age = mean(Age),
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
)
#Q4:
# Using pipes, calculate the average age and percent immigrant (i.e., average ratio of immigrants) for every country.
# Display the top 5 countries in terms of average age.
# Hint: For displaying the top 5, refer to the help for slice( ) to find the right form of the function to use.
# Calculate percent immigrant for every country in dataset.
WorldData$Age = (2024- WorldData$BirthYear)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>%  summarize(avg_age = mean(Age),percent_immigrant = mean(Immigrant)*100
#    avg_age = mean(Age),    percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>%  summarize(avg_age = mean(Age),percent_immigrant = mean(Immigrant)*100)
# Display the top 5 countries in terms of average age
top_5_countries <- CountryStats %>%
arrange(desc(avg_age)) %>%
slice_head(n = 5)
# Print the top 5 countries
print(top_5_countries)
ImmigrantStats <- WorldData %>%
group_by(Country, Marital) %>%
summarise(
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
) %>%
ungroup()
# Filter the results for China
ChinaImmigrantStats <- ImmigrantStats %>%
filter(CountryName == "China")
# Filter the results for China
ChinaImmigrantStats <- ImmigrantStats %>%
filter(Country == "China")
# Print the results for China
print(ChinaImmigrantStats)
View(ImmigrantStats)
View(ImmigrantStats)
# Define the function meanSat
meanSat <- function(country_name) {
WorldData %>%
filter(CountryName == country_name) %>%
group_by(Immigrant) %>%
summarise(
avg_satisfaction = mean(Satisfied, na.rm = TRUE)
)
}
# Show the results for China
ChinaSatisfaction <- meanSat("China")
WorldData %>%
filter(Country == country_name) %>%
group_by(Immigrant) %>%
summarise(
avg_satisfaction = mean(Satisfied, na.rm = TRUE)
)
# Define the function meanSat
meanSat <- function(country_name) {
WorldData %>%
filter(Country == country_name) %>%
group_by(Immigrant) %>%
summarise(
avg_satisfaction = mean(Satisfied, na.rm = TRUE)
)
}
# Show the results for China
ChinaSatisfaction <- meanSat("China")
# Print the results for China
print(ChinaSatisfaction)
analytics = read.csv("WebAnalytics.csv")
analytics = read.csv("WebAnalytics3.csv")
plot(analytics$TimeOnPage, analytics$PageViews,
pch = 19, # Change the shape of the points
col = "blue", # Change the color of the points
cex = 1.5, # Change the size of the points
xlab = "Time on Page (seconds)", # Set the x-axis label
ylab = "Page Views", # Set the y-axis label
main = "Scatterplot of Time on Page vs. Page Views", # Add a title to the plot
xlim = c(0, 300000) # Set the limit on the x-axis
)
ggplot(WorldData, aes(x = TimeOnPage, y = PageViews)) +
geom_point(shape = 19, color = "blue", size = 2) + # Change the shape, color, and size of the points
labs(
x = "Time on Page (seconds)", # Set the x-axis label
y = "Page Views", # Set the y-axis label
title = "Scatterplot of Time on Page vs. Page Views" # Add a title to the plot
) +
xlim(0, 300000) # Set a limit on the x-axis
# Convert TotalDownloads to a factor for visual clarity on the x axis
WorldData$TotalDownloads <- as.factor(WorldData$TotalDownloads)
ggplot(WorldData, aes(x = Region, y = ConversionRate)) +
geom_boxplot(color = "darkblue", fill = "lightblue") + # Change the border and fill color of the boxplots
labs(
title = "Conversion Rate by Region",
subtitle = "Analysis of Conversion Rates across Different Regions",
x = "", # Blank x-axis label
y = "Conversion Rate"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, color = "darkred"), # Adjust title location, size, and color
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "darkgreen") # Adjust subtitle location, size, and color
)
# Create the scatterplot with jitters
ggplot(analytics, aes(x = TotalDownloads, y = ConversionRate)) +
geom_jitter(shape = 19, color = "red", size = 2, width = 0.2, height = 0) + # Add jitters and customize the points
labs(
x = "Total Downloads", # Set the x-axis label
y = "Conversion Rate", # Set the y-axis label
title = "Scatterplot of Total Downloads vs. Conversion Rate with Jitters" # Add a title to the plot
) +
theme_classic() # Use a classic theme
ggplot(analytics, aes(x = Region, y = ConversionRate)) +
geom_boxplot(color = "darkblue", fill = "lightblue") + # Change the border and fill color of the boxplots
labs(
title = "Conversion Rate by Region",
subtitle = "Analysis of Conversion Rates across Different Regions",
x = "", # Blank x-axis label
y = "Conversion Rate"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, color = "darkred"), # Adjust title location, size, and color
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "darkgreen") # Adjust subtitle location, size, and color
)
ggplot(analytics, aes(x = Region, y = ConversionRate, fill = Source)) +
geom_boxplot() +
facet_wrap(~ Source) +
labs(
title = "Conversion Rate by Region and Source",
subtitle = "Analysis of Conversion Rates across Different Regions and Sources",
x = "", # Blank x-axis label
y = "Conversion Rate"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, color = "darkred"), # Adjust title location, size, and color
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "darkgreen"), # Adjust subtitle location, size, and color
legend.position = "bottom" # Position the legend at the bottom
)
#Q1:
# Load the World values survey data "WorldValues3.csv" and save it as WorldData.
# Load the country code data "CountryCodes3.csv" and save it as CountryData.
WorldData = read.csv("WorldValues3.csv")
CountryData = read.csv("CountryCodes3.csv")
#Q1:
# Load the World values survey data "WorldValues3.csv" and save it as WorldData.
# Load the country code data "CountryCodes3.csv" and save it as CountryData.
WorldData = read.csv("WorldValues3.csv")
CountryData = read.csv("CountryCodes3.csv")
# Perform a join to add countrycode to WorldData
WorldData <- left_join(WorldData, CountryData, by = c("CountryCode" = "ID"))
# Return the first 10 unique countries
unique_countries <- unique(WorldData$Country)
# Return the first 10 unique countries
unique_countries <- unique(WorldData$Country)
first_10_countries <- head(unique_countries, 10)
# Print the first 10 unique countries
print(first_10_countries)
print(first_10_countries)
colnames(WorldData)
# Drop the specified columns
WorldData <- WorldData %>% select(-Income, -Education, - lifeexpect)
# Get the dimension of the updated WorldData
dim(WorldData)
# Calculate average age and percent immigrant for every country
CountryStats <- WorldData %>%
group_by(Country) %>%  summarize(avg_age = mean((2024-BirthYear)),percent_immigrant = mean(Immigrant)*100)
# Display the top 5 countries in terms of average age
top_5_countries <- CountryStats %>%
arrange(desc(avg_age)) %>%
slice_head(n = 5)
# Print the top 5 countries
print(top_5_countries)
ImmigrantStats <- WorldData %>%
group_by(Country, Marital) %>%
summarise(
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
) %>%
ungroup()
# Print the top 5 countries
print(top_5_countries)
View(CountryStats)
View(CountryStats)
ImmigrantStats <- WorldData %>%
group_by(Country, Marital) %>%
summarise(
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
)
# Filter the results for China
ChinaImmigrantStats <- ImmigrantStats %>%
filter(Country == "China")
# Print the results for China
print(ChinaImmigrantStats)
ImmigrantStats <- WorldData %>%
group_by(Country, Marital) %>%
summarise(
percent_immigrant = mean(Immigrant, na.rm = TRUE) * 100
)
# Filter the results for China
ChinaImmigrantStats <- ImmigrantStats %>%
filter(Country == "China")
# Print the results for China
print(ChinaImmigrantStats)
# Show the results for China
ChinaSatisfaction <- meanSat("China")
# Define the function meanSat
meanSat <- function(country_name) {
WorldData %>%
filter(Country == country_name) %>%
group_by(Immigrant) %>%
summarise(
avg_satisfaction = mean(Satisfied, na.rm = TRUE)
)
}
# Show the results for China
ChinaSatisfaction <- meanSat("China")
# Print the results for China
print(ChinaSatisfaction)
analytics = read.csv("WebAnalytics3.csv")
plot(analytics$TimeOnPage, analytics$PageViews,
pch = 19, # Change the shape of the points
col = "blue", # Change the color of the points
cex = 1.5, # Change the size of the points
xlab = "Time on Page (seconds)", # Set the x-axis label
ylab = "Page Views", # Set the y-axis label
main = "Scatterplot of Time on Page vs. Page Views", # Add a title to the plot
xlim = c(0, 300000) # Set the limit on the x-axis
)
# Convert TotalDownloads to a factor for visual clarity on the x axis
analytics$TotalDownloads <- as.factor(analytics$TotalDownloads)
# Create the scatterplot
ggplot(analytics, aes(x = TotalDownloads, y = ConversionRate)) +
geom_point(shape = 19, color = "blue", size = 2) + # Customize the points
labs(
x = "Total Downloads", # Set the x-axis label
y = "Conversion Rate", # Set the y-axis label
title = "Scatterplot of Total Downloads vs. Conversion Rate" # Add a title to the plot
) +
theme_minimal() # Use a minimal theme
# Create the scatterplot with jitters
ggplot(analytics, aes(x = TotalDownloads, y = ConversionRate)) +
geom_jitter(shape = 19, color = "red", size = 2, width = 0.2, height = 0) + # Add jitters and customize the points
labs(
x = "Total Downloads", # Set the x-axis label
y = "Conversion Rate", # Set the y-axis label
title = "Scatterplot of Total Downloads vs. Conversion Rate with Jitters" # Add a title to the plot
) +
theme_classic() # Use a classic theme
ggplot(analytics, aes(x = Region, y = ConversionRate)) +
geom_boxplot(color = "darkblue", fill = "lightblue") + # Change the border and fill color of the boxplots
labs(
title = "Conversion Rate by Region",
subtitle = "Analysis of Conversion Rates across Different Regions",
x = "", # Blank x-axis label
y = "Conversion Rate"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, color = "darkred"), # Adjust title location, size, and color
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "darkgreen") # Adjust subtitle location, size, and color
)
ggplot(analytics, aes(x = Region, y = ConversionRate, fill = Source)) +
geom_boxplot() +
facet_wrap(~ Source) +
labs(
title = "Conversion Rate by Region and Source",
subtitle = "Analysis of Conversion Rates across Different Regions and Sources",
x = "", # Blank x-axis label
y = "Conversion Rate"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, color = "darkred"), # Adjust title location, size, and color
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "darkgreen"), # Adjust subtitle location, size, and color
legend.position = "bottom" # Position the legend at the bottom
)
View(CountryData)
ggplot(analytics, aes(x = Region, y = ConversionRate)) +
geom_boxplot(color = "darkblue", fill = "lightblue") + # Change the border and fill color of the boxplots
labs(
title = "Conversion Rate by Region",
subtitle = "Analysis of Conversion Rates across Different Regions",
x = "", # Blank x-axis label
y = "Conversion Rate"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, color = "darkred"), # Adjust title location, size, and color
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "darkgreen") # Adjust subtitle location, size, and color
)
# Create the scatterplot
ggplot(analytics, aes(x = TotalDownloads, y = ConversionRate)) +
geom_point(shape = 19, color = "blue", size = 2) + # Customize the points
labs(
x = "Total Downloads", # Set the x-axis label
y = "Conversion Rate", # Set the y-axis label
title = "Scatterplot of Total Downloads vs. Conversion Rate" # Add a title to the plot
) +
theme_minimal() # Use a minimal theme
