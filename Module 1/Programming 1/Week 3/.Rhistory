income[missingIndex] = 250
missingIndex
income>150 #check to see which income are greater than 150
sum(income>150) #count the number of incomes which are greater than 150
initials = c("BZ","RR","SD","LV",NA) #a character vector: three strings, each containing different characters
class(initials)
initials = c("BZ","RR","SD","LV",NA) #a character vector: three strings, each containing different characters
class(initials)
mat = cbind(initials,taxRate,income) #combining the vectors into a new vector
mat
df$tax = df$taxRate/100 * df$income #creating a new variable for actual tax amount of each income
df
str(df)
df$tax = df$taxRate/100 * df$income #creating a new variable for actual tax amount of each income
apply(df,1,anyNA) #check which rows have missing values
df$tax = df$taxRate/100 * df$income #creating a new variable for actual tax amount of each income
apply(df,1,anyNA) #check which rows have missing values
#Read the dataset and check some of its basic information:
WV = read.csv("C:\Users\harpe\Documents\Georgetown MSBA\Module 1\Programming 1\Week 1\WorldValues_W1Live.csv")
#Read the dataset and check some of its basic information:
WV = read.csv("C:\Users\harpe\Documents\Georgetown MSBA\Module 1\Programming 1\Week 1\WorldValues_W1Live.csv")
#Read the dataset and check some of its basic information:
WV = read.csv("WorldValues_W1Live.csv")
#Read the dataset and check some of its basic information:
WV = read.csv("WorldValues_W1Live.csv")
#Read the dataset and check some of its basic information:
WV = read.csv("WorldValues_W1Live.csv")
#Read the dataset and check some of its basic information:
WV = read.csv("WorldValues_W1Live.csv")
dim(WV) #Dimension of the dataset
#Read the dataset and check some of its basic information:
library(readxl)
WV = read.csv("WorldValues_W1Live.csv")
WV = read.csv("C:\Users\harpe\Documents\Georgetown MSBA\Module 1\Programming 1\Week 1\WorldValues_W1Live.csv")
WV = read.csv("C:\Users\harpe\Documents\Georgetown MSBA\Module 1\Programming 1\Week 1/WorldValues_W1Live.csv")
setwd("~/Georgetown MSBA/Module 1/Programming 1/Week 1")
WV = read.csv("WorldValues_W1Live.csv")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("eBayAuctions.csv")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("Assignmwnt 1/eBayAuctions.csv")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("Assignment 1/eBayAuctions.csv")
#2) Write a code that checks if the dataset has any missing values,
#   a code that returns the number of auctions (i.e., rows),
#   and one to return the number of variables (i.e., columns).
anyNA(auctionData)
sum(is.na(auctionData))
#Number of Auctions
nrow(auctionData)
View(auctionData)
#3) What is the maximum auction duration? How many auctions were open for these many days?
#   What is the average auction duration? What percentage of the auctions have an above average duration?
max(auctionData$Duration)
#How many auctions were open for these days
auctionData[auctionData >= 10,]
#How many auctions were open for these days
auctionData[auctionData = 10,]
#How many auctions were open for these days
auctionData[auctionData >= 10,]
#How many auctions were open for these days
auctionData[auctionData$Duration >= 10,]
#How many auctions were open for these days
sum(auctionData[auctionData$Duration >= 10,])
#How many auctions were open for these days
nrow(auctionData[auctionData$Duration >= 10,])
#Average Auction Duration
mean(auctionData$Duration)
(nrow(auctionData[auctionData$Duration > mean(auctionData$Duration)])) / nrow(auctionData)
(nrow(auctionData[auctionData$Duration > 6.42])) / nrow(auctionData)
(nrow(auctionData[auctionData$Duration > 6.42])
nrow(auctionData[auctionData$Duration > 6.42,])
nrow(auctionData[auctionData$Duration > 6.42,])
nrow(auctionData[auctionData$Duration > 6.42,]) / nrow(auctionData)
(nrow(auctionData[auctionData$Duration > 6.42,]) / nrow(auctionData))*100
#What Percentage of Auctions have an above average duration
(nrow(auctionData[auctionData$Duration > mean(auctionData$Duration),]) / nrow(auctionData))*100
# Price Ratio
auctionData$Ratio = auctionData$ClosePrice / auctionData$OpenPrice
# Price Ratio
auctionData$Ratio = (auctionData$ClosePrice / auctionData$OpenPrice)
#Average Price Ration for all auctions
mean(auctionData$Ratio)
View(auctionData)
#Average Ratio for Computer Auctions
mean(auctionData[auctionData$Category = "Computers",])
#Average Ratio for Computer Auctions
mean(auctionData[auctionData$Category == "Computers",])
#Average Ratio for Computer Auctions
computerAuctions = auctionData[auctionData$Category == "Computers",]
mean(computerAuctions$Ratio)
#Average Ratio for Computer Auctions
computerAuctions = auctionData[auctionData$Category == "Computer",]
mean(computerAuctions$Ratio)
catNames <- unique(auctionData$Category)
sort(catNames)
catNames
catNames <- sort(unique(auctionData$Category))
catNames
length(catNames)
?cbind
numAuctions <- vector()
for(i in 1:length(catNames)){
V_C <- mean(auctionData$Category[i,])
# saving value in empty vector in each iteration
numAuctions[i] <- mean(V_C)
}
for(i in 1:length(catNames)){
V_C <- mean(auctionData[auctionData$Category == i])
# saving value in empty vector in each iteration
numAuctions[i] <- mean(V_C)
}
for(i in 1:length(catNames)){
V_C <- mean(auctionData$Category == i)
# saving value in empty vector in each iteration
numAuctions[i] <- mean(V_C)
}
for(i in catNames){
V_C <- mean(auctionData$Category == i)
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
numAuctions
for(i in catNames){
V_C <- nrow(auctionData$Category == i)
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
numAuctions <- vector()
for(i in catNames){
V_C <- nrow(auctionData$Category == i)
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
nrow(auctionData$Category == "Computer")
for(i in catNames){
V_C <- nrow(auctionData[auctionData$Category == i])
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
for(i in catNames){
V_C <- mean(auctionData[auctionData$Category == i])
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
for(i in i:catNames){
V_C <- mean(auctionData[auctionData$Category == i])
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
for(i in i:length(catNames)){
V_C <- mean(auctionData[auctionData$Category == i])
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
numAuctions <- vector()
for(i in i:length(catNames)){
V_C <- mean(auctionData[auctionData$Category == i])
# saving value in empty vector in each iteration
numAuctions[i] <- V_C
}
V_C <- nrow(auctionData[auctionData$Category == i])
numAuctions <- vector()
for(i in i:length(catNames)){
subset_data <- nrow(auctionData[auctionData$Category == i,])
# saving value in empty vector in each iteration
numAuctions[i] <- subset_data
}
numAuctions <- vector()
for(i in catNames){
subset_data <- auctionData[auctionData$Category == i,]
# saving value in empty vector in each iteration
numAuctions[i] <- nrow(subset_data)
}
numAuctions
catInfo = data.frame(cbind(catNames, numAuctions))
catInfo[2,5]
catInfo
catInfo[2,]
catInfo[5,2]
catInfo
numAuctions
weekendTest <- function(day) {
return(day %in% c('Sat', 'Sun'))
}
# Apply the function to create a new column 'Weekend'
auctionData$Weekend <- sapply(auctionData$endDay, weekendTest)
# Count the number of auctions that ended on a weekend
numWeekendAuctions <- sum(auctionData$Weekend)
numWeekendAuctions
auctionData
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("Assignment 1/eBayAuctions.csv")
auctionData
#Checks if the dataset has any missing values
anyNA(auctionData)
#Checks if the dataset has any missing values
anyNA(auctionData)
sum(is.na(auctionData))
#Number of Auctions
nrow(auctionData)
#Number of Variables
ncol(auctionData)
#Maximum Auction Duration
max(auctionData$Duration)
#How many auctions were open for these days
nrow(auctionData[auctionData$Duration >= 10,])
#How many auctions were open for these days - 220
nrow(auctionData[auctionData$Duration == 10,])
#Average Auction Duration
mean(auctionData$Duration)
#What Percentage of Auctions have an above average duration
(nrow(auctionData[auctionData$Duration > mean(auctionData$Duration),]) / nrow(auctionData))*100
df <- auctionData[auctionData$Duration > mean(auctionData$Duration),]
View(df)
#What Percentage of Auctions have an above average duration - 59.04%
(nrow(auctionData[auctionData$Duration > mean(auctionData$Duration),]) / nrow(auctionData))*100
# Price Ratio -
auctionData$Ratio = (auctionData$ClosePrice / auctionData$OpenPrice)
auctionData$Test ="Dollar"
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("Assignment 1/eBayAuctions.csv")
auctionData
#Checks if the dataset has any missing values - No NAs
anyNA(auctionData)
sum(is.na(auctionData))
#Number of Auctions - 1223 Auctions
nrow(auctionData)
#Number of Variables - 6 variables
ncol(auctionData)
#Maximum Auction Duration - 10
max(auctionData$Duration)
#How many auctions were open for these days - 220
nrow(auctionData[auctionData$Duration == 10,])
#Average Auction Duration - 6.421096
mean(auctionData$Duration)
#What Percentage of Auctions have an above average duration - 59.04%
(nrow(auctionData[auctionData$Duration > mean(auctionData$Duration),]) / nrow(auctionData))*100
# Price Ratio -
auctionData$Ratio = (auctionData$ClosePrice / auctionData$OpenPrice)
#Average Price Ration for all auctions
mean(auctionData$Ratio)
#Average Ratio for Computer Auctions
computerAuctions = auctionData[auctionData$Category == "Computer",]
mean(computerAuctions$Ratio)
auctionData$Category
unique(auctionData$Category)
catNames
length(catNames)
for(i in catNames){
subset_data <- auctionData[auctionData$Category == i,]
# saving value in empty vector in each iteration
numAuctions[i] <- nrow(subset_data)
}
numAuctions
catInfo = data.frame(cbind(catNames, numAuctions))
catInfo
catInfo[5,2]
catInfo = data.frame(catNames, numAuctions)
catInfo
# Write two different codes to return the fifth element of the second column in the catInfo dataframe. - 33
catInfo[5,2]
2
# Write two different codes to return the fifth element of the second column in the catInfo dataframe. - 33
catInfo[5,2]
numAuctions
weekendTest <- function(day) {
return(day %in% c('Sat', 'Sun'))
}
# Apply the function to create a new column 'Weekend'
auctionData$Weekend <- sapply(auctionData$endDay, weekendTest)
?sapply
# Apply the function to create a new column 'Weekend'
auctionData$Weekend <- sapply(auctionData$endDay, weekendTest)
sum(auctionData$ClosePrice)
length(auctionData$ClosePrice)
# Count the number of auctions that ended on a weekend
numWeekendAuctions <- sum(auctionData$Weekend)
numWeekendAuctions
catInfo$numAuctions[5]
# Write two different codes to return the fifth element of the second column in the catInfo dataframe. - 33
catInfo[5,2]
x =  c(4, 0, 1, "hello", 3)
x = c(1, 2, 3)
y = c(4, 5, 6)
z = x + y
z
tempVec = c(1, 4, 99, NA, -2)
mean(tempVec)
length(auctionData)
length(auctionData$Duration==10)
sum(auctionData$Duration==10)
ncol(auctionData$Duration==10)
nrow(auctionData$Duration==10)
sum(auctionData$Duration==10)
?apply
# Sampling using R
# Generate a Random Sample of Size 100
# Draw a 100 random numbers from a normal distributions with mean of 15 and standard #
#deviation of 6.
rnorm(n=100, mean = 15, sd= 6)
W2Data = read.csv("Week 2/W2Live-Data.csv") #load a data frame from a CSV file
W2Data = read.csv("Week 2\W2Live-Data.csv") #load a data frame from a CSV file
W2Data = read.csv("W2Live-Data.csv") #load a data frame from a CSV file
W2Data = read.csv("W2Live-Data.csv") #load a data frame from a CSV file
W2Data = read.csv("Week 2\W2Live-Data.csv") #load a data frame from a CSV file
W2Data = read.csv("Week 2/W2Live-Data.csv") #load a data frame from a CSV file
setwd("~/Georgetown MSBA/Module 1/Programming 1/Week 2")
# Create and load some objects
string.vec = c("Comp1", "Comp2", "Comp3", "Comp4", "Comp5")  # A character vector
logical.vec = c(TRUE, FALSE, TRUE)  # A logical vector (TRUE/FALSE)
W2Data = read.csv("Week 2/W2Live-Data.csv") #load a data frame from a CSV file
W2Data = read.csv("W2Live-Data.csv") #load a data frame from a CSV file
# Create and load some objects
string.vec = c("Comp1", "Comp2", "Comp3", "Comp4", "Comp5")  # A character vector
logical.vec = c(TRUE, FALSE, TRUE)  # A logical vector (TRUE/FALSE)
W2Data = read.csv("W2Live-Data.csv") #load a data frame from a CSV file
#Create a list called testList, which combines multiple objects into one structure
#Lists in R can store different types of objects together (e.g., vectors, data frames)
testList = list(strVec = string.vec, logVec = logical.vec, auctionData = W2Data)
testList  #Print the full list to see all elements
#Accessing elements of a list:
#First object in the testList (the string vector)
testList[[1]]  #Using double brackets to extract the first object (strVec)
#Accessing the third element of the first object (strVec) in testList
testList[[1]][3]  #Double brackets for the object, single brackets for the element
testList[[1]][seq(1,5,2)]
#Alternative ways to access the third element of strVec:
testList[["strVec"]][3]  #By name using double brackets
testList$strVec[3]  #Using the dollar sign to access list elements by name
#Accessing elements in the third object of testList (auctionData, which is a data frame)
testList[[3]][2]  #Access the second element of the third object (returns a column)
testList[[3]][,2]  #Access the second column of the data frame (auctionData)
#A loop to go over the dataset and print the category of each auction using a prompt
for (i in 1:nrow(W2Data)){
cat("The category of the first auction is", W2Data$Category[i], "\n")
}
#A loop to go over the dataset and print the category of each auction using a prompt
for (i in 1:nrow(W2Data)){
cat("The category of the first auction is", W2Data$Category[i], "\n")
}
#A loop to go over the dataset and print the category of each auction using a prompt
for (i in 1:nrow(W2Data)){
cat("The category of this auction is", W2Data$Category[i], "\n")
}
#A loop to go over the first ten auctions and save their duration to another vector
# Note: We first create an empty/null vector of size 10 using rep() function
tempVec = c()  # Initialize an empty vector
for (i in 1:10){
tempVec[i] = W2Data$Duration[i]
}
tempVec
#Read the data and save it as W2Data
W2Data = read.csv("W2Live-Data.csv")
#2: Use the AVG to calculate the average seller rating of all auctions.
#   Save this value as avgRating.
#   Does the base R mean() function returns the same value?
avgRating <- AVG(W2Data$sellerRating)
#1: Write a function called AVG that calculates the average of a given vector.
#   Do NOT use the base R mean() function!
AVG <- function(vec) {
sum_vec <- sum(vec)
length_vec <- length(vec)
avg <- sum_vec / length_vec
return(avg)
}
#2: Use the AVG to calculate the average seller rating of all auctions.
#   Save this value as avgRating.
#   Does the base R mean() function returns the same value?
avgRating <- AVG(W2Data$sellerRating)
# Calculate average seller rating using base R mean() function
base_avgRating <- mean(W2Data$sellerRating)
# Print the results
cat("Average seller rating using AVG function: ", avgRating, "\n")
cat("Average seller rating using base R mean() function: ", base_avgRating, "\n")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("Assignment 1/eBayAuctions.csv")
setwd("~/Georgetown MSBA/Module 1/Programming 1/Week 1/Assignment 1")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("Assignment 1/eBayAuctions.csv")
#1) Load the file: "eBayAcution.csv" and save it as auctionData.
auctionData = read.csv("eBayAuctions.csv")
auctionData
sum(auctionData$Duration==10)
#Checks if the dataset has any missing values - No NAs
anyNA(auctionData)
sum(is.na(auctionData))
#Number of Auctions - 1223 Auctions
nrow(auctionData)
#Number of Variables - 6 variables
ncol(auctionData)
#Maximum Auction Duration - 10
max(auctionData$Duration)
#How many auctions were open for these days - 220
nrow(auctionData[auctionData$Duration == 10,])
#Average Auction Duration - 6.421096
mean(auctionData$Duration)
#What Percentage of Auctions have an above average duration - 59.04%
(nrow(auctionData[auctionData$Duration > mean(auctionData$Duration),]) / nrow(auctionData))*100
# Price Ratio -
auctionData$Ratio = (auctionData$ClosePrice / auctionData$OpenPrice)
#Average Price Ration for all auctions - 119.6468
mean(auctionData$Ratio)
#Average Ratio for Computer Auctions - 21.82995
computerAuctions = auctionData[auctionData$Category == "Computer",]
mean(computerAuctions$Ratio)
#Unique Categories -10
catNames <- sort(unique(auctionData$Category))
catNames
length(catNames)
numAuctions <- vector()
for(i in catNames){
subset_data <- auctionData[auctionData$Category == i,]
# saving value in empty vector in each iteration
numAuctions[i] <- nrow(subset_data)
}
numAuctions
catInfo = data.frame(cbind(catNames, numAuctions))
catInfo
# Write two different codes to return the fifth element of the second column in the catInfo dataframe. - 33
catInfo[5,2]
catInfo$numAuctions[5]
#8) Write a piece of code that prints the name of each category and the number of auctions in that category.
cat
numAuctions
weekendTest <- function(day) {
return(day %in% c('Sat', 'Sun'))
}
# Apply the function to create a new column 'Weekend'
auctionData$Weekend <- sapply(auctionData$endDay, weekendTest)
auctionData
# Count the number of auctions that ended on a weekend
numWeekendAuctions <- sum(auctionData$Weekend)
numWeekendAuctions
setwd("~/Georgetown MSBA/Module 1/Programming 1/Week 3")
# Install tidyverse package
install.packages('tidyverse')
# Load the package
require(tidyverse)
stk = read_csv("Stocks_W3.csv")
#The following will provide all variables in-between date and AMZN (notice order in original).
dplyr::select(stk, date:AMZN)[1:4,]
# Show first 4 rows
dplyr::select(stk, K, NFLX, date)[1:4,]
# Rename variables
dplyr::select(stk, date, Kellog=K,
Tesla = TSLA,
Netflix = NFLX)[1:4,]
# Drop variables with a negative sign in from of variable name (here we drop the K (Kellog) variable)
dplyr::select(stk,-K)
# Create an object with only columns we need
stk2 =  stk %>% dplyr::select(date, DJI, AAPL, TSLA)
# Filter this object by selected date
filter(stk2, date=="2020-01-14")
# Use | ("or")
filter(stk2, date == "2020-01-14" |
date == "2020-01-15")
# Filter this object by selected date
filter(stk2, date=="2020-01-14")
# Use | ("or")
filter(stk2, date == "2020-01-14" |
date == "2020-01-15")
# Use & ("and")
filter(stk2, AAPL>75 & TSLA<100)
# Sorting the data
arrange(stk2, TSLA)[1:10, ]
# Sorting in a descending order
arrange(stk2, desc(TSLA))[1:10, ]
# DJI29plus is a new variable that indicates if Dow Jones is above 29k
mutate(stk, DJI29plus = (DJI > 29000))
# Sorting in a descending order
arrange(stk2, desc(TSLA))[1:10, ]
# DJI29plus is a new variable that indicates if Dow Jones is above 29k
mutate(stk, DJI29plus = (DJI > 29000))
# Create month and day variables from string date variable
# subset(x, a, b) ("substring") pulls characters from a to b in object x
stk = mutate(stk,
Month = as.numeric(substr(date, 6, 7)),
Day = as.numeric(substr(date, 9, 10)))
head(stk)
# Creating new objects that contains summary information
summarize(stk,
AppleAvg = mean(AAPL),
AppleMax = max(AAPL),
AppleMin = min(AAPL))
# Count the number of observations and the number of distinct entries
summarize(stk,
N=n(),
N_Kellog_prices = n_distinct(K))
# group by month
x <- group_by(stk, Month)
# group by month and a Covid indicator
x = mutate(stk, Covid = (Month==4) | (Month==3 & Day>12))
xGroup <- group_by(x, Month, Covid)
summarize(xGroup, AppleMax = max(AAPL))
# Option 1: Perform each manipulation individually and save each entry as a new object
x <- filter(stk, Month==3)
x <- mutate(x, AppleTeslaRatio = AAPL/TSLA)
#In all the exercises, use tidyverse functions, preferably with the piping operator.
library(tidyverse)
#Load and save "AuctionInfo_W3Live.csv" as auctionData and "SellerInfo_W3Live.csv" as sellerData.
auctionData = read.csv("AuctionInfo_W3Live.csv")
sellerData = read.csv("SellerInfo_W3Live.csv")
dplyr::select(auctionData, -OpenPrice)
left_join(auctionData, sellerData, by=c(AuctionID,ID))
left_join(auctionData, sellerData, by=c(AuctionID="ID",ID))
left_join(auctionData, sellerData, by=c("AuctionID"="ID","ID"))
left_join(auctionData, sellerData, by=c("AuctionID"="ID"))
#8) Write a piece of code that prints the name of each category and the number of auctions in that category.
numAuctions
#8) Write a piece of code that prints the name of each category and the number of auctions in that category.
numAuctions
